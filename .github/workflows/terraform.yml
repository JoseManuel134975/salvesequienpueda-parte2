name: Generate JSDoc Documentation, deploy Terraform & test with PHPUnit

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs: # Podemos elegir si queremos un job u otro
      job:
        description: "Choose a job"
        required: true
        type: choice
        options:
          - deploy
          - phpunit

jobs:
  phpunit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        uses: php-actions/composer@v6

      - name: Run PHPUnit
        uses: php-actions/phpunit@v3
        with:
          version: 9.6
          bootstrap: vendor/autoload.php
          configuration: phpunit.xml
          args: --coverage-text

      # - name: Run PHPUnit from a subdirectory
      #   run: ./vendor/bin/phpunit --testdox
      #   working-directory: ./src/php

  deploy:
    runs-on: ubuntu-latest
    needs: phpunit
    if: ${{ success() }}

    env:
      aws_region: us-east-1 # Variable de entorno en GitHub Action

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Ensure JSDoc is executable
        run: chmod +x node_modules/.bin/jsdoc # Esto asegura que jsdoc tenga permisos de ejecución

      - name: Generate documentation
        run: npm run docs # Ejecuta el script que genera la documentación

      - name: Deploy to GitHub Pages # Publica en GitHub Pages
        uses: peaceiris/actions-gh-pages@v3 # Publica en la rama gh-pages los archivos del publish_dir (más abajo)
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # Token para autenticación
          publish_dir: ./docs # Directorio de publicación. Los archivos de documentación se recogen de este directorio

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # Acción para autenticarse en AWS
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # CLAVE PRIVADA
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # TOKEN TEMPORAL
          aws-region: ${{ env.aws_region }} # Región

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 # Acción para configurar Terraform

      # Inicializa el estado de Terraform
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Terraform plan
        working-directory: ./terraform
        run: terraform plan

      - name: Terraform apply
        working-directory: ./terraform
        run: terraform apply -auto-approve # Auto-approve para que no pida ninguna confirmación***

      - name: Upload terraform-state to S3
        run: aws s3 cp terraform/terraform.tfstate s3://bucket-jose-manuel/terraform.tfstate # Copia el tf.state creado en Ubuntu al bucket desde AWS CLI

  destroy:
    runs-on: ubuntu-latest
    env:
      aws_region: us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # Acción para autenticarse en AWS
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # CLAVE PRIVADA
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # TOKEN TEMPORAL
          aws-region: ${{ env.aws_region }} # Región

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 # Acción para configurar Terraform

      - name: Descargar estado de Terraform
        run: |
          aws s3 cp s3://bucket-jose-manuel/terraform.tfstate terraform/terraform.tfstate # Lo mismo pero al revés

      # Inicializa el estado de Terraform
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Destroy Terraform
        working-directory: ./terraform
        run: terraform destroy -auto-approve