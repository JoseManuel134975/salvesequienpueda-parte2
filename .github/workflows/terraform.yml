name: Generate Documentation & deploy on Terraform/AWS

# on:
#   push:
#     branches:
#       - main

on:
  workflow_dispatch:

    inputs:
      job:
        description: 'Choose a job'
        required: true
        type: choice
        options:
          - deploy
          - destroy

jobs:

  deploy:
    if: ${{ github.event.inputs.job == 'deploy' }}
    runs-on: ubuntu-latest
    env:
      aws_region: us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Ensure JSDoc is executable
        run: chmod +x node_modules/.bin/jsdoc # Esto asegura que jsdoc tenga permisos de ejecución

      - name: Generate documentation
        run: npm run docs # Ejecuta el script que genera la documentación

      - name: Deploy to GitHub Pages # Publica en GitHub Pages
        uses: peaceiris/actions-gh-pages@v3 # Publica en la rama gh-pages los archivos del publish_dir (más abajo)
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # Token para autenticación
          publish_dir: ./docs # Directorio de publicación. Los archivos de documentación se recogen de este directorio

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # Acción para autenticarse en AWS
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # CLAVE PRIVADA
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # TOKEN TEMPORAL
          aws-region: ${{ env.aws_region }} # Región

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 # Acción para configurar Terraform

      # Inicializa el estado de Terraform
      - name: Initialize Terraform
        working-directory: ./terraform  
        run: terraform init
          

      - name: Terraform plan
        working-directory: ./terraform  
        run: terraform plan
          

      - name: Terraform apply
        working-directory: ./terraform  
        run: terraform apply -auto-approve
          

      # - name: Upload Terraform State
      #   uses: actions/upload-artifact@v4 # Carga como artefacto el estado de Terraform después de sufrir cambios
      #   with:
      #     name: terraform-state
      #     path: ./terraform/terraform.tfstate # Cambia a la ruta correcta

  destroy:
    if: ${{ github.event.inputs.job == 'destroy' }}
    runs-on: ubuntu-latest
    env:
      aws_region: us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # Acción para autenticarse en AWS
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # CLAVE PRIVADA
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # TOKEN TEMPORAL
          aws-region: ${{ env.aws_region }} # Región

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 # Acción para configurar Terraform

      # Inicializa el estado de Terraform
      - name: Initialize Terraform
        working-directory: ./terraform  
        run: terraform init
          
      - name: Plan for check
        working-directory: ./terraform
        run: terraform plan -destroy

      - name: Destroy Terraform
        working-directory: ./terraform  
        run: terraform destroy -auto-approve
          